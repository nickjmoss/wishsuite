import {
	createActionTrackingMiddleware2,
	recordPatches,
	isActionContextThisOrChildOf,
} from 'mobx-state-tree';
import { message } from 'antd';

// This function is a variation from MST-Middlewares Atomic
// It prevents actions from completing if they error and instead displays an error toast.
// If any error happens in a regular action, it will revert everything that happened in that action and anything that may have happened in a parent function if a parent function action called it.
// If any error happens in a flow generator function, it will only revert the line that went wrong but the rest of the code will remain.
// This is just behavior with how the middleware works is being marked for future understanding of the middleware nuances

// Using createActionTrackingMiddleware2 allows for middleware that can track asynchronous and synchronous actions
// Keep in mind it can only be used on stores/models that have been created so any dependency models that are just referenced in another model will not trigger the middleware
const errorHandling = createActionTrackingMiddleware2({
	filter (call) {
		// only call the methods above for actions that were not being recorded,
		// but do not call them for child acions (which inherit a copy of the env)
		if (call.env) {
			// already recording
			return false;
		}
		return true;
	},
	onStart (call) {
		// recordPatches creates a recorder that listens to all actions for the node and allow to stop and undo the action if needed which is why happens in onFinish if there's an error
		const recorder = recordPatches(call.tree, (_patch, _inversePatch, actionContext) => {
			// only record patches that were generated by this action or children of this action
			return !!actionContext && isActionContextThisOrChildOf(actionContext, call.id);
		});
		recorder.resume();
		call.env = {
			recorder: recorder,
		};
	},
	onFinish (call, error) {
		const recorder = call.env.recorder;
		call.env = undefined;
		recorder.stop();
		if (error !== undefined) {
			const apiError = error.response?.data?.errorCode;
			if (!apiError) {
				// only undo the action if the error didn't come from a flow generator function because the try/catch will handle it
				message.error('Unknown error');
				recorder.undo();
			}
		}
	},
});

export default errorHandling;
